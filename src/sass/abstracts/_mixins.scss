@use "sass:map";
@use "@angular/material" as mat;
@use "sass:meta";
// @use "./variables";

//** All COLOR (both light/dark mode) variables goes inside this mixin... */
@mixin color-grabber($theme) {
  // Get the color config from the theme.
  $color-config: mat.get-color-config($theme);
  // Get the primary color palette from the color-config.
  $primary-palette: map.get($color-config, "primary");
  $accent-palette: map.get($color-config, "accent");
  @debug $primary-palette;
  @warn mat.get-color-from-palette($primary-palette, A700);
  //primary palette color
  --clr-primary-200: #{mat.get-color-from-palette($primary-palette, 200)};
  --clr-primary-300: #{mat.get-color-from-palette($primary-palette, 300)};
  --clr-primary-400: #{mat.get-color-from-palette($primary-palette, 400)};
  --clr-primary-500: #{mat.get-color-from-palette($primary-palette, 500)};
  --clr-primary-600: #{mat.get-color-from-palette($primary-palette, 600)};
  --clr-primary-700: #{mat.get-color-from-palette($primary-palette, 700)};
  --clr-primary-800: #{mat.get-color-from-palette($primary-palette, 800)};
  --clr-primary-900: #{mat.get-color-from-palette($primary-palette, 900)};
  //accent palette color
  --clr-accent-200: #{mat.get-color-from-palette($accent-palette, 200)};
  --clr-accent-300: #{mat.get-color-from-palette($accent-palette, 300)};
  --clr-accent-400: #{mat.get-color-from-palette($accent-palette, 400)};
  --clr-accent-500: #{mat.get-color-from-palette($accent-palette, 500)};
  --clr-accent-600: #{mat.get-color-from-palette($accent-palette, 600)};
  --clr-accent-700: #{mat.get-color-from-palette($accent-palette, 700)};
  --clr-accent-800: #{mat.get-color-from-palette($accent-palette, 800)};
  --clr-accent-900: #{mat.get-color-from-palette($accent-palette, 900)};
  // text
  --clr-primary-text-default: #{mat.get-color-from-palette(
      $primary-palette,
      default-contrast
    )};
  --clr-primary-text-dark: #{mat.get-color-from-palette(
      $primary-palette,
      lighter-contrast
    )};
  --clr-primary-text-3: #{mat.get-color-from-palette(
      $primary-palette,
      darker-contrast
    )};
  // }
}

@mixin sass-to-css($variables) {
  @each $name, $value in $variables {
    --#{$name}: #{$value};
  }
}
// @mixin sass-to-css($variables) {
//   @each $name, $value in meta.module-variables("variables") {
//     --#{$name}: #{$value};
//   }
// }
@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;
  }

  #{$property}: $value;
}
@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

//max widdth: 400px;  ==> mobile-ptr
// min width: 401px & max width: 600px => mobile-lds
// min width: 601px & max width: 768px => tablet-ptr
// min width: 769px & max width: 992px => tablet-lds
// min width: 993px & max width: 1200px => laptop
// min width: 1201px & max width: 1400px => desktop
// min-width: 1401px => desktop-lg
$breakpoints: (
  "mobile-ptr": "(max-width: 400px)",
  "mobile-lds": "(min-width: 401px) and (max-width: 600px)",
  "tablet-ptr": "(min-width: 601px) and (max-width: 768px)",
  "tablet-lds": "(min-width: 769px) and (max-width: 992px)",
  "laptop": "(min-width: 993px) and (max-width: 1200px)",
  "desktop": "(min-width: 1201px) and (max-width: 1400px)",
  "desktop-lg": "(min-width: 1401px)",
);

@debug inspect("(min-width: 767px) and (max-width: 991px)");
@debug map.get($breakpoints, "small");

//for Responsiveness
@mixin respond-to($name) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $name) {
    // Prints a media query based on the value
    @media only screen and #{map-get($breakpoints, $name)} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}
