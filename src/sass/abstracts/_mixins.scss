@use "sass:map";
@use "@angular/material" as mat;
@use "sass:meta";
// @use "./variables";

//** All COLOR (both light/dark mode) variables goes inside this mixin... */
@mixin color-grabber($theme) {
  // Get the color config from the theme.
  $color-config: mat.get-color-config($theme);
  // Get the primary color palette from the color-config.
  $primary-palette: map.get($color-config, "primary");
  $accent-palette: map.get($color-config, "accent");

  @debug "this is primary palette ==  `$primary-palette` map";
  @debug $primary-palette;
  // Read the 500 hue from the primary color palette.
  // color: mat.get-color-from-palette($primary-palette, 500);
  // @warn "Unfortunately, no value could be retrieved from `#{mat.get-color-from-palette($primary-palette, 500)}`. ";
  @warn mat.get-color-from-palette($primary-palette, A700);
  --color-primary-500: #{mat.get-color-from-palette($primary-palette, 500)};
  --color-primary-400: #{mat.get-color-from-palette($primary-palette, 400)};
  --color-primary-300: #{mat.get-color-from-palette($primary-palette, 300)};
  --color-primary-200: #{mat.get-color-from-palette($primary-palette, 200)};
  --color-accent-500: #{mat.get-color-from-palette($accent-palette, 500)};
  --color-accent-200: #{mat.get-color-from-palette($accent-palette, 200)};

  // text
  --color-primary-text-default: #{mat.get-color-from-palette(
      $primary-palette,
      default-contrast
    )};
  --color-primary-text-dark: #{mat.get-color-from-palette(
      $primary-palette,
      lighter-contrast
    )};
  --color-primary-text-3: #{mat.get-color-from-palette(
      $primary-palette,
      darker-contrast
    )};
  // }
}

@mixin sass-to-css($variables) {
  @each $name, $value in $variables {
    --#{$name}: #{$value};
  }
}
// @mixin sass-to-css($variables) {
//   @each $name, $value in meta.module-variables("variables") {
//     --#{$name}: #{$value};
//   }
// }
@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;
  }

  #{$property}: $value;
}
@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}
$breakpoints: (
  "small": (
    min-width: 767px,
  ),
  "medium": (
    min-width: 992px,
  ),
  "large": (
    min-width: 1200px,
  ),
);

//for Responsiveness
@mixin respond-to($name) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $name) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $name))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}
